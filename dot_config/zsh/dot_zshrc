# clean up duplicates in $PATH
typeset -U PATH

### HISTORY
HISTFILE="$ZDOTDIR/.zsh_history"
HISTSIZE=5000
SAVEHIST=5000
setopt hist_ignore_all_dups inc_append_history

### XDG
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_CACHE_HOME="$HOME/.cache"

### PROMPT
autoload -Uz vcs_info
precmd() { vcs_info }
setopt prompt_subst
zstyle ":vcs_info:*" formats "%F{blue}(%f%b%F{blue})%f "
PROMPT='%F{blue}%1~%f ${vcs_info_msg_0_}'

### EDITOR
export EDITOR="nvim"
bindkey -e

### BINARIES
# homebrew
case "$OSTYPE" in
    darwin*)
    brew_prefix="/opt/homebrew"
    ;;
    linux*)
    brew_prefix="/home/linuxbrew/.linuxbrew"
    ;;
esac
eval "$(${brew_prefix}/bin/brew shellenv)"
FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
# fnm
export FNM_DIR="$XDG_DATA_HOME/fnm"
eval "$(fnm env --use-on-cd)"
# pyenv
eval "$(pyenv init -)"
# poetry
export POETRY_CONFIG_DIR="$HOME/.poetry"
export PATH="$HOME/.poetry/bin:$PATH"
# cargo
. "$HOME/.cargo/env"
FPATH="$(rustc --print sysroot)/share/zsh/site-functions:${FPATH}"
# go
export PATH="$(go env GOPATH)/bin:$PATH"
# openjdk
export PATH="${brew_prefix}/opt/openjdk/bin:$PATH"
# spicetify
SPICETIFY_INSTALL="$HOME/.spicetify"
export PATH="$HOME/.spicetify:$PATH"

### CONFIGS
# fzf
source ~/.config/fzf/config
source "$(brew --prefix)/opt/fzf/shell/key-bindings.zsh"
# fzf-tab
source ~/.config/zsh/plugins/fzf-tab/fzf-tab.plugin.zsh
zstyle ":fzf-tab:*" fzf-flags --height=60%
zstyle ":fzf-tab:complete:cd:*" fzf-preview '\
eza -alh -TL 2 --color=always \
--git --ignore-glob=".git" --no-permissions --no-time $realpath'
# zsh-autosuggestions
source ~/.config/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
bindkey "^ " forward-word

### ALIASES
alias ls="eza"
alias ll="eza -alh"
alias buu="brew update && brew upgrade"
alias vim="nvim"

### ENV VARIABLES
# mage
export MAGEFILE_CACHE="/tmp/magefile"
export MAGEFILE_ENABLE_COLOR=1

### COMPLETIONS
# koushin completions
FPATH="$HOME/repos/koushin/completions:${FPATH}"
# load completions
autoload -Uz compinit && compinit

### TMUX
# attach to tmux automatically
if [ -z "$TMUX" ]; then
    if tmux has-session -t dev 2>/dev/null; then
        tmux attach-session -t dev
    else
        tmux new-session -A -s dev
    fi
fi
# run macchina
if [[ ! -z "$TMUX"
    && $(tmux display-message -p "#I") == "1"
    && $(tmux display-message -p "#{pane_index}") == "0"
]]; then
    macchina
fi
